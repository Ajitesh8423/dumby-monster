{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","Search","placeholder","handler","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIaA,EAAO,SAAAC,GAAK,OACxB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJTC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAEDD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAY,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCJjEM,G,MAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAcC,EAAc,EAAdA,QACnC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCPG,E,kDArCb,aAAc,IAAD,8BACX,gBAaFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXd,SAAW,GACXW,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAASmB,S,oBAOzC,WAAU,IAAD,EAE4BC,KAAKN,MAAhCd,EAFD,EAECA,SAAWW,EAFZ,EAEYA,YACbU,EAAkBrB,EAASsB,QAAO,SAAC3B,GAAD,OAAaA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGrG,OACE,sBAAK/B,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,8BACA,cAAC,EAAD,CACEW,YAAY,kBACZC,QAASgB,KAAKZ,eAEhB,cAAC,EAAD,CAAUR,SAAUqB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d747d4f2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\n\r\nexport const Card = props =>(\r\n <div className='card-container'>\r\n     <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h1>{props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n </div>\r\n);","import React from 'react'\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const Cardlist = (props) => {\r\n    return <div className='card-list'>\r\n        {\r\n          props.monsters.map((monster)=> <Card monster={monster} key={monster.id} />)\r\n        }\r\n    </div>\r\n}","import React from 'react'\r\nimport './search-box.styles.css';\r\n\r\nexport const Search = ({ placeholder , handler }) => {\r\n    return (\r\n        <input \r\n            className='search'\r\n            type='search' \r\n            placeholder={placeholder} \r\n            onChange={handler} \r\n        />\r\n    )\r\n}\r\n","import React , {Component} from 'react';\r\nimport './App.css';\r\nimport {Cardlist} from './components/card-list/card-list.component';\r\nimport {Search} from './components/search-box/search-box.component';\r\n\r\nclass App extends Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      monsters : [],\r\n      searchField:''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({monsters:users}))\r\n  }\r\n\r\n  handleChange = e =>{\r\n    this.setState({searchField:e.target.value})\r\n  }\r\n\r\n  render() {\r\n    \r\n    const { monsters , searchField } = this.state;\r\n    const filteredMonster = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    \r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className='header'>Monsters Rolodex</h1>\r\n        <Search \r\n          placeholder='search monsters' \r\n          handler={this.handleChange}\r\n        />\r\n        <Cardlist monsters={filteredMonster} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}